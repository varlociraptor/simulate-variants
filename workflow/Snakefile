rule all:
    input:
        expand("results/mapped/{depth}x.sorted.bam", depth=[5, 10, 20, 30, 40])


rule get_genome:
    output:
        "resources/genome.fasta"
    params:
        species="saccharomyces_cerevisiae",
        datatype="dna",
        build="R64-1-1",
        release="100"
    log:
        "logs/get-genome.log"
    cache: True  # save space and time with between workflow caching (see docs)
    wrapper:
        "0.63.0/bio/reference/ensembl-sequence"


rule constrain_genome:
    input:
        fa="resources/genome.fasta",
        fai="resources/genome.fasta.fai"
    output:
        "resources/chrI.genome.fasta"
    log:
        "logs/constrain-genome.log"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools faidx {input.fa} I > {output} 2> {log}"


rule mason_variator:
    input:
        fa="resources/chrI.genome.fasta",
        fai="resources/chrI.genome.fasta.fai"
    output:
        "results/simulated.variants.vcf",
    conda:
        "envs/mason.yaml"
    log:
        "logs/mason/variator.log"
    shell:
        "mason_variator --sv-inversion-rate 0.0001 --sv-duplication-rate 0.0001 -ir {input.fa} -ov {output} 2> {log}"

rule mason_simulator:
    input:
        ref="resources/chrI.genome.fasta",
        fai="resources/chrI.genome.fasta.fai",
        vars="results/simulated.variants.vcf"
    output:
        "results/simulated.{depth}x.reads.1.fq.gz",
        "results/simulated.{depth}x.reads.2.fq.gz"
    params:
        n_reads=lambda w: 230218 * int(w.depth)
    conda:
        "envs/mason.yaml"
    log:
        "logs/mason/simulator.{depth}x.log"
    shell:
        "mason_simulator -ir {input.ref} -n {params.n_reads} -iv {input.vars} -o {output[0]} -or {output[1]} 2> {log}"


rule fasta_index:
    input:
        "{prefix}.fasta"
    output:
        "{prefix}.fasta.fai"
    wrapper:
        "0.63.0/bio/samtools/faidx"


rule bwa_index:
    input:
        "resources/chrI.genome.fasta"
    output:
        multiext("resources/chrI.genome.fasta", ".amb", ".ann", ".bwt", ".pac", ".sa")
    log:
        "logs/bwa_index.log"
    resources:
        mem_mb=369000
    wrapper:
        "0.59.2/bio/bwa/index"


rule map_reads:
    input:
        reads=[
            "results/simulated.{depth}x.reads.1.fq.gz",
            "results/simulated.{depth}x.reads.2.fq.gz"
        ],
        idx=rules.bwa_index.output,
    output:
        "results/mapped/{depth}x.sorted.bam"
    log:
        "logs/bwa_mem/{depth}.log"
    params:
        index=lambda w, input: os.path.splitext(input.idx[0])[0],
        sort="samtools",
        sort_order="coordinate"
    threads: 8
    wrapper:
        "0.56.0/bio/bwa/mem"


rule samtools_index:
    input:
        "results/mapped/{depth}x.sorted.bam"
    output:
        "results/mapped/{depth}x.sorted.bam.bai"
    wrapper:
        "0.63.0/bio/samtools/index"

        
rule varlociraptor_preprocess:
    input:
        vcf="results/simulated.variants.vcf",
        fa="resources/chrI.genome.fasta",
        fai="resources/chrI.genome.fasta.fai",
        bam="results/mapped/{depth}x.sorted.bam",
        bai="results/mapped/{depth}x.sorted.bam.bai"
    output:
        "results/varlociraptor/preprocess/{depth}x.bcf"
    log:
        "logs/varlociraptor/preprocess/{depth}x.log"
    shell:
        "varlociraptor preprocess variants {input.fa} --candidates {input.vcf} --bam {input.bam} --output {output} 2> {log}"


rule varlociraptor_testcase:
    input:
        obs="results/varlociraptor/preprocess/{depth}x.bcf",
        scenario="resources/scenario.yaml"
    output:
        directory("resources/testcases/{chrom}:{pos}.{depth}x")
    log:
        "logs/varlociraptor/testcase/{chrom}:{pos}.{depth}x.log"
    shell:
        "varlociraptor call variants "
        "--testcase-locus {wildcards.chrom}:{wildcards.pos} "
        "--testcase-prefix {output} "
        "generic "
        "--obs simulated={input.obs} "
        "--scenario {input.scenario} "
        "2> {log}"
